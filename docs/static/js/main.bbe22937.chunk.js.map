{"version":3,"sources":["images/pika-error.gif","services/PokemonService.js","components/SearchBox.js","components/Card.js","components/Pile.js","components/Details.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","BASE_URL","PokemonService","fetch","apiURL","then","response","json","data","results","map","pokemon","lastSlashPos","url","lastIndexOf","length","id","substring","name","kinds","types","sort","first","second","slot","eachType","type","imageURI","sprites","front_default","kind","evolvesFrom","evolves_from_species","instance","SearchBox","props","state","searchText","keyPressedTimeout","handleKeyPressed","bind","handleChange","this","trim","handleSearch","event","setState","target","value","code","keyCode","which","clearTimeout","preventDefault","launchSearch","setTimeout","className","placeholder","onChange","onKeyUp","Component","defaultProps","capitalize","text","charAt","toUpperCase","substr","toLowerCase","Card","pokemonData","useState","setPokemonData","useEffect","isComponentMounted","getInstance","getPokemonData","catch","error","console","getPokemonEvolution","useFetchPokemon","history","useHistory","kindList","key","onClick","push","src","alt","Pile","cards","pokemonList","IMG_ERROR","Details","match","params","split","App","ALL_POKEMONS","dataState","searchPokemons","filterPokemons","location","pathname","cleanText","slice","matchExpression","RegExp","filteredPokemons","filter","test","getPokemons","exact","path","render","routerProps","withRouter","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,wC,2SCArCC,EAA6B,uCAW7BC,E,sGAwBF,MAFU,aAEHC,MAFPC,0DAGGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAQJ,OAPqBA,EAAKC,QAAQC,KAAK,SAAAC,GACrC,IAAMC,EAAeD,EAAQE,IAAIC,YAAa,IAAKH,EAAQE,IAAIE,OAAO,GAGtE,MAAO,CAAEC,GAFYL,EAAQE,IAAII,UAAWL,EAAa,EAAGD,EAAQE,IAAIE,OAAO,GAEvDG,KAAMP,EAAQO,c,qCAc9BF,GACd,OAAOb,MAAOF,EAxDiB,WAwDjB,UAAsCe,EAAtC,MACXX,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GACL,IACMW,EADcX,EAAKY,MAAMC,MAAM,SAACC,EAAOC,GAAR,OAAmBD,EAAME,KAAOD,EAAOC,QAClDd,KAAK,SAAAe,GAAQ,OAAIA,EAASC,KAAKR,QASzD,MAPoB,CAClBF,GAAUR,EAAKQ,GACfE,KAAUV,EAAKU,KACfS,SAAUnB,EAAKoB,QAAQC,cACvBC,KAAUX,Q,0CAcGH,GACnB,OAAOb,MAAOF,EAhFiB,mBAgFjB,UAA2Ce,EAA3C,MACXX,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAML,MALoB,CAClBQ,GAAaR,EAAKQ,GAClBe,YAAavB,EAAKwB,qBAAqBd,Y,qCAnE7C,OAJI,OAAShB,EAAe+B,WAC1B/B,EAAe+B,SAAW,IAAI/B,GAGzBA,EAAe+B,a,KATpB/B,EAEG+B,SAAW,KAkFL/B,QClFTgC,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,WAAYF,EAAME,YAEpB,EAAKC,kBAAoB,KAEzB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAmB,EAAKA,aAAaD,KAAlB,gBATP,E,2DAoBjB,IAAMH,EAAaK,KAAKN,MAAMC,WAAWM,OACzCD,KAAKP,MAAMS,aAAcP,K,mCASbQ,GACZH,KAAKI,SAAS,CAAET,WAAYQ,EAAME,OAAOC,U,uCAazBH,GAAS,IAAD,OACpBI,EAAQJ,EAAMK,QAAUL,EAAMK,QAAUL,EAAMM,MAEpB,MAA1BT,KAAKJ,mBACPc,aAAcV,KAAKJ,mBAGV,KAAPW,GACFJ,EAAMQ,iBACNX,KAAKY,gBAGLZ,KAAKJ,kBAAoBiB,YACvB,WAAQ,EAAKD,iBACb,O,+BAYJ,OACE,yBAAKE,UAAU,aACb,2BAAOA,UAAU,SAAS9B,KAAK,OAAO+B,YAAY,6BAA6BT,MAAON,KAAKN,MAAMC,WAAYqB,SAAUhB,KAAKD,aAAckB,QAASjB,KAAKH,wB,GAzExIqB,cAoFxB1B,EAAU2B,aAAe,CAEvBxB,WAAY,IAGCH,Q,qBCxFf,SAAS4B,EAAYC,GACnB,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,OAAO,GAAGC,cAavD,IAqDMC,EAAO,SAACjC,GACZ,IAAMkC,EAtDgB,SAACrD,EAAIE,GAAU,IAAD,EACEoD,mBAAS,CAC7CtD,GAAIA,EACJE,KAAM4C,EAAW5C,GACjBS,SAAU,GACVG,KAAM,GACNC,YAAa,OANqB,mBAC7BsC,EAD6B,KAChBE,EADgB,KAwCpC,OA/BAC,qBAAU,WACR,IAAIC,GAAqB,EA2BvB,OAzBFvE,EAAewE,cACZC,eAAgB3D,GAChBX,MAAM,SAAAG,GACDiE,GACFF,EAAe,uCACVF,GACA7D,GAFS,IAGZU,KAAM4C,EAAYtD,EAAKU,YAI5B0D,OAAM,SAAAC,GAAUC,QAAQD,MAAMA,MAE/B3E,EAAewE,cACZK,oBAAqB/D,GACrBX,MAAM,SAAAG,GACDiE,GACFF,EAAe,2BACVF,GACA7D,OAIRoE,OAAM,SAAAC,GAAUC,QAAQD,MAAMA,MAE1B,WAAQJ,GAAqB,MAGjCJ,EAcaW,CAAiB7C,EAAMnB,GAAImB,EAAMjB,MAE/C+D,EAAUC,cAMhB,IAAMC,EAAWd,EAAYvC,KAAKpB,KAAK,SAAAoB,GAAI,OACzC,0BAAMsD,IAAKtD,GAAOA,MAGpB,OACE,6BAAS0B,UAAU,OAAO6B,QAT5B,WACEJ,EAAQK,KAAR,mBAA0BnD,EAAMnB,GAAhC,YAAsCmB,EAAMjB,SAS1C,yBAAKsC,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAK+B,IAAKlB,EAAY1C,SAAU6D,IAA8B,KAAvBnB,EAAY1C,SAAb,6BAAoD0C,EAAYnD,MAAhE,oBAAsFmD,EAAYnD,SAE1I,0BAAMsC,UAAU,MAAhB,QACQa,EAAYrD,KAGtB,yBAAKwC,UAAU,aACb,yBAAKA,UAAU,QAAQa,EAAYnD,MACnC,yBAAKsC,UAAU,QAAQ2B,KACpBd,EAAYtC,aACb,yBAAKyB,UAAU,aACb,yBAAKA,UAAU,SAAf,kBACA,yBAAKA,UAAU,UAAf,YAaZY,EAAKP,aAAe,GAKLO,Q,yBCpHTqB,EAAO,SAACtD,GACZ,IAAMuD,EAAQvD,EAAMwD,YAAYjF,KAAK,SAAAC,GAAO,OAC1C,kBAAC,EAAD,CAAMyE,IAAKzE,EAAQK,GAAIA,GAAIL,EAAQK,GAAIE,KAAMP,EAAQO,UAGvD,OACE,6BAASsC,UAAU,QACE,YAAhBrB,EAAMC,OAA2B,yBAAKoB,UAAU,WAAf,qBACjB,cAAhBrB,EAAMC,OAA2B,yBAAKoB,UAAU,WAAf,4BACjB,SAAhBrB,EAAMC,OAA2BsD,EACjB,UAAhBvD,EAAMC,OAA2B,yBAAKoB,UAAU,SAAQ,qEAA4C,yBAAK+B,IAAKK,IAAWJ,IAAI,4CAYtIC,EAAK5B,aAAe,CAElBzB,MAAO,WAGMqD,Q,MCzBf,SAAS3B,EAAYC,GACnB,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,OAAO,GAAGC,cAavD,IAqDM0B,EAAU,SAAC1D,GAAW,IAAD,EACQA,EAAM2D,MAAMC,OAAOX,IAAIY,MAAM,KADrC,mBAEnB3B,EAvDgB,SAACrD,EAAIE,GAAU,IAAD,EACEoD,mBAAS,CAC7CtD,GAAIA,EACJE,KAAM4C,EAAW5C,GACjBS,SAAU,GACVG,KAAM,GACNC,YAAa,OANqB,mBAC7BsC,EAD6B,KAChBE,EADgB,KAwCpC,OA/BAC,qBAAU,WACR,IAAIC,GAAqB,EA2BvB,OAzBFvE,EAAewE,cACZC,eAAgB3D,GAChBX,MAAM,SAAAG,GACDiE,GACFF,EAAe,uCACVF,GACA7D,GAFS,IAGZU,KAAM4C,EAAYtD,EAAKU,YAI5B0D,OAAM,SAAAC,GAAUC,QAAQD,MAAMA,MAE/B3E,EAAewE,cACZK,oBAAqB/D,GACrBX,MAAM,SAAAG,GACDiE,GACFF,EAAe,2BACVF,GACA7D,OAIRoE,OAAM,SAAAC,GAAUC,QAAQD,MAAMA,MAE1B,WAAQJ,GAAqB,MAGjCJ,EAeaW,CAFK,WAInBC,EAAUC,cAMhB,IAAMC,EAAWd,EAAYvC,KAAKpB,KAAK,SAAAoB,GAAI,OACzC,0BAAMsD,IAAKtD,GAAOA,MAGpB,OACE,6BAAS0B,UAAU,WACjB,yBAAKA,UAAU,cACb,2BAAO9B,KAAK,SAAS8B,UAAU,OAAOR,MAAM,oBAAoBqC,QAXtE,WACEJ,EAAQK,KAAM,SAYZ,6BAAS9B,UAAU,YACjB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAK+B,IAAKlB,EAAY1C,SAAU6D,IAA8B,KAAvBnB,EAAY1C,SAAb,6BAAoD0C,EAAYnD,MAAhE,oBAAsFmD,EAAYnD,SAE1I,0BAAMsC,UAAU,MAAhB,QACQa,EAAYrD,KAGtB,yBAAKwC,UAAU,aACb,yBAAKA,UAAU,QAAQa,EAAYnD,MACnC,yBAAKsC,UAAU,QAAQ2B,KACpBd,EAAYtC,aACb,yBAAKyB,UAAU,aACb,yBAAKA,UAAU,SAAf,kBACA,yBAAKA,UAAU,UAAf,aAadqC,EAAQhC,aAAe,GAIRgC,QCrHTI,G,wDACJ,WAAY9D,GAAQ,IAAD,8BACjB,cAAMA,IAED+D,aAAe,GAEpB,EAAK9D,MAAQ,CACXC,WAAY,GACZsD,YAAa,GACbQ,UAAW,WAGb,EAAKC,eAAiB,EAAKA,eAAe5D,KAApB,gBAXL,E,2DAsBHuB,GAAQ,IAAD,OACrBrB,KAAKI,SAAU,CAAET,WAAY0B,IAAQ,WAAQ,EAAKsC,oBACL,MAAzC3D,KAAKP,MAAM8C,QAAQqB,SAASC,UAC9B7D,KAAKP,MAAM8C,QAAQK,KAAK,O,uCAa1B,IAAMkB,EAAY9D,KAAKN,MAAMC,WAAWM,OAAOwB,cAG/C,GAFAzB,KAAKI,SAAU,CAACqD,UAAW,cAET,KAAdK,EACF9D,KAAKI,SAAU,CAAE6C,YAAajD,KAAKwD,aAAaO,MAAO,EAAG,GAAKN,UAAW,aAEvE,CACH,IAAMO,EAAmBC,OAAQH,EAAW,MACtCI,EAAmBlE,KAAKwD,aAAaW,QAAQ,SAACxC,GAAD,OAAiBqC,EAAgBI,KAAMzC,EAAYnD,SACtGwB,KAAKI,SAAU,CAAE6C,YAAaiB,EAAkBT,UAAW,Y,0CAU1C,IAAD,OAClBjG,EAAewE,cACdqC,cACA1G,MAAO,SAAAG,GACN,EAAK0F,aAAe1F,EACpB,EAAK6F,oBAENzB,OAAO,SAAAC,GACN,EAAK/B,SAAU,CAACqD,UAAW,e,+BAUrB,IAAD,OACP,OACA,yBAAK3C,UAAU,OACb,6BAASA,UAAU,UACjB,kBAAC,EAAD,CAAWZ,aAAcF,KAAK0D,eAAgB/D,WAAYK,KAAKN,MAAMC,cAEvE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2E,OAAK,EAACC,KAAK,IAAIC,OAAS,SAACC,GAAD,OAC7B,kBAAC,EAAD,CAAMxB,YAAa,EAAKvD,MAAMuD,YAAavD,MAAO,EAAKA,MAAM+D,eAE/D,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,gBAAgBC,OAAS,SAACC,GAAD,OACzC,kBAAC,EAAD,CAASrB,MAAOqB,EAAYrB,iB,GAvFpBlC,cA+FHwD,cAAYnB,GClGPoB,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASzB,MACvB,2DCXN0B,IAASN,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzH,MAAK,SAAA0H,GACJA,EAAaC,gBAEdpD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoD,c","file":"static/js/main.bbe22937.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pika-error.6cc7b065.gif\";","const BASE_URL                   = 'http://pokeapi.salestock.net/api/v2/';\nconst POKEMON_DATA_ENDPOINT      = 'pokemon/';\nconst POKEMON_EVOLUTION_ENDPOINT = 'pokemon-species/';\nconst LIMIT                      = 811;\n\n/**\n * Helper class used as a service to group the interaction with the PokeAPI.\n * This class has to be used as a Singleton:\n *   PokemonService.getInstance()\n */\n\nclass PokemonService {\n\n  static instance = null;\n\n  static getInstance() {\n    if (null === PokemonService.instance) {\n      PokemonService.instance = new PokemonService();\n    }\n\n    return PokemonService.instance;\n  }\n\n\n  /**\n   * Fetch a list of pokemons from PokeAPI.\n   * \n   * @param {String} name \n   */ \n\n  getPokemons() {\n    let apiURL = BASE_URL + POKEMON_DATA_ENDPOINT;\n\n    apiURL += '?limit=' + LIMIT;\n\n    return fetch( apiURL )\n      .then(response => response.json())\n      .then(data => {\n        const filteredData = data.results.map( pokemon => {\n          const lastSlashPos = pokemon.url.lastIndexOf( '/', pokemon.url.length-2 );\n          const pokemonId    = pokemon.url.substring( lastSlashPos+1, pokemon.url.length-1 );\n\n          return { id: pokemonId, name: pokemon.name };\n        });\n\n        return filteredData;\n      });\n  }\n\n\n  /**\n   * Fetch the name, image and type of a specific Pokemon from de PokeAPI.\n   * \n   * @param {int} id The ID to identify the Pokemon at the PokeAPI\n   */\n\n  getPokemonData( id ) {\n    return fetch( BASE_URL + POKEMON_DATA_ENDPOINT + `${id}/` )\n      .then( response => response.json() )\n      .then( data => {\n        const sortedTypes = data.types.sort( (first, second) => first.slot > second.slot );\n        const kinds = sortedTypes.map( eachType => eachType.type.name );\n\n        const pokemonData = {\n          id:       data.id,\n          name:     data.name,\n          imageURI: data.sprites.front_default,\n          kind:     kinds\n        };\n\n        return pokemonData;\n      })\n  }\n\n\n  /**\n   * Fetch the parent name of the Pokemon evolution line.\n   * \n   * @param {int} id The ID to identify the Pokemon at the PokeAPI\n   */\n\n  getPokemonEvolution( id ) {\n    return fetch( BASE_URL + POKEMON_EVOLUTION_ENDPOINT + `${id}/` )\n      .then( response => response.json() )\n      .then( data => {\n        const pokemonData = {\n          id:          data.id,\n          evolvesFrom: data.evolves_from_species.name,\n        };\n\n        return pokemonData;\n      })\n  }\n}\n\nexport default PokemonService;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/SearchBox.scss';\n\n/**\n * Prints the search box with an input text.\n * This component monitorizes the user input and calls to refresh the search\n * results when the user pressed Enter key or is typing a new text.\n *\n * Needs handleSearch prop from parent with a function that updates the search.\n *\n */\n\nclass SearchBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchText: props.searchText\n    }\n    this.keyPressedTimeout = null;\n\n    this.handleKeyPressed = this.handleKeyPressed.bind(this);\n    this.handleChange     = this.handleChange.bind(this);\n  }\n\n  /**\n   * Calls to the parent function handleSearch to lift the search keyword\n   * to the parent component.\n   * This function is called when the user is typing or presses Enter key.\n   *\n   */\n\n  launchSearch() {\n    const searchText = this.state.searchText.trim();\n    this.props.handleSearch( searchText );\n  }\n\n  /**\n   * Auto-updates the state with the input value.\n   *\n   * @param {Event} event Event object generated.\n   */\n\n  handleChange( event ) {\n    this.setState({ searchText: event.target.value });\n  }\n\n  /**\n   * Detects which key has pressed the user.\n   * If has pressed Enter, performs a lifting calling search update\n   * function of parent Component.\n   * If has pressed other key, waits a fraction of a second to check if\n   * the user is already typing and then performs the lifting.\n   *\n   * @param {Event} event Event object with the key info.\n   */\n\n  handleKeyPressed( event ) {\n    var code = (event.keyCode ? event.keyCode : event.which);\n\n    if( this.keyPressedTimeout != null ) {\n      clearTimeout( this.keyPressedTimeout );\n    }\n\n    if( code===13 ) {\n      event.preventDefault();\n      this.launchSearch();\n    }\n    else {\n      this.keyPressedTimeout = setTimeout(\n        () => { this.launchSearch(); },\n        300\n        );\n    }\n  }\n  \n  /**\n   * Prints the search box with a input text element.\n   * The input auto-refreshes the state.\n   *\n   */\n\n  render() {\n    return (\n      <div className=\"searchbox\">\n        <input className=\"search\" type=\"text\" placeholder=\"Filtra pokemons por nombre\" value={this.state.searchText} onChange={this.handleChange} onKeyUp={this.handleKeyPressed} />\n      </div>\n    );\n  }\n}\n\nSearchBox.propTypes = {\n  handleSearch: PropTypes.func.isRequired,\n  searchText:   PropTypes.string\n};\n\nSearchBox.defaultProps = {\n  // handleSearch isRequired\n  searchText: ''\n};\n\nexport default SearchBox;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from \"react-router-dom\";\nimport PokemonService from '../services/PokemonService';\nimport '../stylesheets/Card.scss';\n\n/**\n * Helper function to capitalize a string.\n * I.E.\n *   capitalize( 'text' )  --> 'Text'\n * \n * @param {String} text \n */\n\nfunction capitalize( text ) {\n  return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()\n}\n\n\n/**\n * Hook to double fetch the Pokemon data using PokemonService.\n * It has to take Pokemon data from two endpoints:\n *  - /pokemon/         For the sprite image and kind of the Pokemon\n *  - /pokemon-species/ For the evolution data\n * \n * @param {int} id It's the numeric ID (set by API) of the Pokemon to fetch.\n */\n\nconst useFetchPokemon = (id, name) => {\n  const [pokemonData, setPokemonData] = useState({\n    id: id,\n    name: capitalize(name),\n    imageURI: '',\n    kind: [],\n    evolvesFrom: null\n  });\n\n  useEffect(() => {\n    let isComponentMounted = true;\n\n    PokemonService.getInstance()\n      .getPokemonData( id )\n      .then( data => {\n        if( isComponentMounted ) {\n          setPokemonData({\n            ...pokemonData,\n            ...data,\n            name: capitalize( data.name )\n          });\n        }\n      })\n      .catch(error => {console.error(error);});\n\n      PokemonService.getInstance()\n        .getPokemonEvolution( id )\n        .then( data => {\n          if( isComponentMounted ) {\n            setPokemonData({\n              ...pokemonData,\n              ...data\n            });\n          }\n        })\n        .catch(error => {console.error(error);});\n\n      return () => { isComponentMounted = false; };\n  });\n\n  return pokemonData;\n}\n\n\n/**\n * Prints a single card with the Pokemon data.\n * It has two parts:\n *  - Grey part with the image and ID.\n *  - White part with the name, type and evolves from info.\n * \n * @param {*} props \n */\n\nconst Card = (props) => {\n  const pokemonData = useFetchPokemon( props.id, props.name );\n\n  const history = useHistory();\n\n  function handleClick() {\n    history.push( `/details/${props.id}-${props.name}`  );\n  }\n\n  const kindList = pokemonData.kind.map( kind => (\n    <span key={kind}>{kind}</span>\n  ));\n\n  return (\n    <article className=\"card\" onClick={handleClick}>\n      <div className=\"greypart\">\n        <div className=\"photo\">\n          <img src={pokemonData.imageURI} alt={ (pokemonData.imageURI==='') ? `Cargando imagen de ${pokemonData.name}` : `Imagen de ${pokemonData.name}`} />\n        </div>\n        <span className=\"id\">\n          ID / {pokemonData.id}\n        </span>\n      </div>\n      <div className=\"whitepart\">\n        <div className=\"name\">{pokemonData.name}</div>\n        <div className=\"kind\">{kindList}</div>\n        {!!pokemonData.evolvesFrom && (\n          <div className=\"evolution\">\n            <div className=\"ttile\">Evoluciona de:</div>\n            <div className=\"parent\">EVOL</div>\n          </div>\n        )}\n      </div>\n    </article>\n  );\n}\n\nCard.propTypes = {\n  id:   PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n};\n\nCard.defaultProps = {\n  // id,name isRequired\n};\n\n\nexport default Card;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\nimport '../stylesheets/Pile.scss';\nimport IMG_ERROR from '../images/pika-error.gif';\n\n/**\n * Prints the list of selected Pokemon cards.\n * It receives a list of objects that contains the Pokemon's name and its URI.\n * \n * @param {Array[Object]} props \n */\nconst Pile = (props) => {\n  const cards = props.pokemonList.map( pokemon => (\n    <Card key={pokemon.id} id={pokemon.id} name={pokemon.name}></Card>\n  ));\n\n  return (\n    <section className=\"pile\">\n      { (props.state === 'loading')   && (<div className=\"message\">Cargando datos...</div>) }\n      { (props.state === 'filtering') && (<div className=\"message\">Filtrando Pokémons...</div>) }\n      { (props.state === 'done')      && (cards) }\n      { (props.state === 'error')     && (<div className=\"error\"><div>Hemos tenido un error de conexión</div><img src={IMG_ERROR} alt=\"Pikachu asustado por la situación\" /></div>) }\n    </section>\n  );\n};\n\nconst STATE_VALUES = [ 'loading', 'filtering', 'done', 'error' ];\n\nPile.propTypes = {\n  pokemonList: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  state:       PropTypes.oneOf(STATE_VALUES)\n};\n\nPile.defaultProps = {\n  // pokemonList isRequired\n  state: 'loading'\n};\n\nexport default Pile;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from \"react-router-dom\";\nimport PokemonService from '../services/PokemonService';\nimport '../stylesheets/Details.scss';\n\n/**\n * Helper function to capitalize a string.\n * I.E.\n *   capitalize( 'text' )  --> 'Text'\n * \n * @param {String} text \n */\n\nfunction capitalize( text ) {\n  return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()\n}\n\n\n/**\n * Hook to double fetch the Pokemon data using PokemonService.\n * It has to take Pokemon data from two endpoints:\n *  - /pokemon/         For the sprite image and kind of the Pokemon\n *  - /pokemon-species/ For the evolution data\n * \n * @param {int} id It's the numeric ID (set by API) of the Pokemon to fetch.\n */\n\nconst useFetchPokemon = (id, name) => {\n  const [pokemonData, setPokemonData] = useState({\n    id: id,\n    name: capitalize(name),\n    imageURI: '',\n    kind: [],\n    evolvesFrom: null\n  });\n\n  useEffect(() => {\n    let isComponentMounted = true;\n\n    PokemonService.getInstance()\n      .getPokemonData( id )\n      .then( data => {\n        if( isComponentMounted ) {\n          setPokemonData({\n            ...pokemonData,\n            ...data,\n            name: capitalize( data.name )\n          });\n        }\n      })\n      .catch(error => {console.error(error);});\n\n      PokemonService.getInstance()\n        .getPokemonEvolution( id )\n        .then( data => {\n          if( isComponentMounted ) {\n            setPokemonData({\n              ...pokemonData,\n              ...data\n            });\n          }\n        })\n        .catch(error => {console.error(error);});\n\n      return () => { isComponentMounted = false; };\n  });\n\n  return pokemonData;\n}\n\n\n/**\n * Prints a single card with the Pokemon details filling all the with of the page.\n * It has two parts:\n *  - Grey part with the image and ID.\n *  - White part with the name, type and evolves from info.\n * \n * @param {*} props \n */\n\nconst Details = (props) => {\n  const [pokemonId, pokemonName] = props.match.params.key.split('-');\n  const pokemonData = useFetchPokemon( pokemonId, pokemonName );\n\n  const history = useHistory();\n\n  function handleClickGoBack() {\n    history.push( '/' );\n  }\n\n  const kindList = pokemonData.kind.map( kind => (\n    <span key={kind}>{kind}</span>\n  ));\n\n  return (\n    <section className=\"details\">\n      <div className=\"breadcrumb\">\n        <input type=\"button\" className=\"back\" value=\"Volver a la lista\" onClick={handleClickGoBack} />\n      </div>\n      <article className=\"card big\">\n        <div className=\"greypart\">\n          <div className=\"photo\">\n            <img src={pokemonData.imageURI} alt={ (pokemonData.imageURI==='') ? `Cargando imagen de ${pokemonData.name}` : `Imagen de ${pokemonData.name}`} />\n          </div>\n          <span className=\"id\">\n            ID / {pokemonData.id}\n          </span>\n        </div>\n        <div className=\"whitepart\">\n          <div className=\"name\">{pokemonData.name}</div>\n          <div className=\"kind\">{kindList}</div>\n          {!!pokemonData.evolvesFrom && (\n            <div className=\"evolution\">\n              <div className=\"ttile\">Evoluciona de:</div>\n              <div className=\"parent\">EVOL</div>\n            </div>\n          )}\n        </div>\n      </article>\n    </section>\n  );\n}\n\nDetails.propTypes = {\n  match:   PropTypes.object.isRequired\n};\n\nDetails.defaultProps = {\n  // match isRequired\n};\n\nexport default Details;","import React, { Component } from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport PokemonService from '../services/PokemonService';\nimport SearchBox from './SearchBox';\nimport Pile from './Pile';\nimport Details from './Details';\nimport '../stylesheets/App.scss';\n\n/**\n * Main component.\n * Prints the search box section and the pile of cards.\n * Also, keeps a list of all Pokemons names and URI and performs the search filter.\n * \n */\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.ALL_POKEMONS = [];\n\n    this.state = {\n      searchText: '',\n      pokemonList: [],\n      dataState: 'loading'\n    }\n\n    this.searchPokemons = this.searchPokemons.bind( this );\n  }\n\n\n  /**\n   * Changes the search keyword stored in the state.\n   * Then, starts the Pokemon filtering process.\n   * \n   * @param {String} text \n   */\n\n  searchPokemons( text ) {\n    this.setState( { searchText: text }, () => { this.filterPokemons(); } );\n    if( this.props.history.location.pathname !== '/' ) {\n      this.props.history.push('/');\n    }\n  }\n\n\n  /**\n   * Filters the Pokemon according to the keyword typed in the search box and puts the result\n   * in the state.\n   * It performs a full text search: search all Pokemons which have the keyword in its name.\n   * \n   */\n\n  filterPokemons() {\n    const cleanText = this.state.searchText.trim().toLowerCase();\n    this.setState( {dataState: 'filtering'} );\n\n    if( cleanText === '' ) {\n      this.setState( { pokemonList: this.ALL_POKEMONS.slice( 0, 6 ), dataState: 'done' } )\n    }\n    else {\n      const matchExpression  = RegExp( cleanText, 'gi' );\n      const filteredPokemons = this.ALL_POKEMONS.filter( (pokemonData) => matchExpression.test( pokemonData.name ) );\n      this.setState( { pokemonList: filteredPokemons, dataState: 'done' } )\n    }\n  }\n\n  /**\n   * Fetch all Pokemon names and URIs at start.\n   * Then, starts the Pokemon filtering process to update the state.\n   * \n   */\n\n  componentDidMount() {\n    PokemonService.getInstance()\n    .getPokemons()\n    .then(  data  => {\n      this.ALL_POKEMONS = data;\n      this.filterPokemons();\n    })\n    .catch( error => {\n      this.setState( {dataState: 'error'} );\n     });\n  }\n\n\n  /**\n   * Prints search section using SearchBox component and the list of Pokemon cards using Pile component.\n   * \n   */\n\n  render() {\n    return (\n    <div className=\"app\">\n      <section className=\"header\">\n        <SearchBox handleSearch={this.searchPokemons} searchText={this.state.searchText}/>\n      </section>\n      <Switch>\n        <Route exact path=\"/\" render={ (routerProps) => (\n          <Pile pokemonList={this.state.pokemonList} state={this.state.dataState}/>\n        )} />\n        <Route exact path=\"/details/:key\" render={ (routerProps) => (\n          <Details match={routerProps.match}/>\n        )} />\n      </Switch>\n    </div>\n    );\n  }\n}\n\nexport default withRouter( App );","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}